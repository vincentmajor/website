<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Vincent Major</title>
    <link>https://vincentmajor.com/post/</link>
      <atom:link href="https://vincentmajor.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Vincent Major 2018–2019</copyright><lastBuildDate>Wed, 14 Nov 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://vincentmajor.com/img/portrait.jpg</url>
      <title>Posts</title>
      <link>https://vincentmajor.com/post/</link>
    </image>
    
    <item>
      <title>Reading SEER fixed width files</title>
      <link>https://vincentmajor.com/post/2019-11-14_seer_read_fwf/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://vincentmajor.com/post/2019-11-14_seer_read_fwf/</guid>
      <description>&lt;p&gt;I help teach a class each summer which serves as an introducion to biomedical informatics and programming for, mostly resident, physicians.
During the 4 weeks, we present basics in R and guide the students to start an analysis usually using a publically available dataset.
One dataset that comes up every year is &lt;a href=&#34;https://seer.cancer.gov/data/&#34;&gt;SEER&lt;/a&gt; from the National Cancer Institute.&lt;/p&gt;

&lt;p&gt;But, there&#39;s a problem. SEER suggests you use their software, &lt;em&gt;SEER*Stat&lt;/em&gt;, which requires you to use Windows.
They &lt;em&gt;do&lt;/em&gt; provide data in an alternative &amp;quot;ASCII text format&amp;quot; but provide little guidance for new users to get started.&lt;/p&gt;

&lt;h1 id=&#34;reading-text-files&#34;&gt;Reading text files&lt;/h1&gt;

&lt;p&gt;Reading data into R is full of pitfalls for any new programmer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;multi-line headers,&lt;/li&gt;
&lt;li&gt;atypical delimiters,&lt;/li&gt;
&lt;li&gt;odd field types (e.g. Excel dates).&lt;/li&gt;
&lt;li&gt;leading zeros / whitespace,&lt;/li&gt;
&lt;li&gt;atypical values for missing data,&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SEER throws another curveball because their &amp;quot;ASCII text format&amp;quot; is actually a &lt;strong&gt;fixed width file&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&#34;fixed-width-files&#34;&gt;Fixed width files&lt;/h2&gt;

&lt;p&gt;Most text based data files use a delimiter (otherwise known as a separator; e.g. commas, semicolons, spaces, or tabs) that marks the end of one field and the start of the next.
On the other hand, a fixed width file (FWF) specifies the &lt;strong&gt;position&lt;/strong&gt; or &lt;strong&gt;width&lt;/strong&gt; of each field.&lt;/p&gt;

&lt;p&gt;For example, here is a file where the first field is 20 characters long, the second field is 10 characters long and the third, and final, field is another 12 characters long.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;John Smith          WA        418-Y11-4111
Mary Hartford       CA        319-Z19-4341
Evan Nolan          IL        219-532-c301
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make FWFs even &lt;em&gt;more&lt;/em&gt; complicated, they often don&#39;t use a header to specify the field names. Since the user is supposed to know the field positons, they should also know the field names.&lt;/p&gt;

&lt;p&gt;With the field names and positions (or widths), we can load the file and it should look like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;State&lt;/th&gt;
&lt;th&gt;SSN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;John Smith          &amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;WA        &amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;418-Y11-4111&amp;quot;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;quot;Mary Hartford       &amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;CA        &amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;319-Z19-4341&amp;quot;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;quot;Evan Nolan          &amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;IL        &amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;219-532-c301&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;r-code&#34;&gt;R code&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;readr::read_fwf()&lt;/code&gt; function is great for reading FWFs.
The format is very similar to the rest of &lt;code&gt;readr&lt;/code&gt; (and, in turn, the rest of the &lt;code&gt;tidyverse&lt;/code&gt;) and you can specify the field names and positions in your favorite way or let &lt;code&gt;read_fwf&lt;/code&gt; guess for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readr)

read_fwf(fwf_sample, fwf_cols(name = 20, state = 10, ssn = 12) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which returns a tibble that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A tibble: 3 x 3
  name          state ssn         
  &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       
1 John Smith    WA    418-Y11-4111
2 Mary Hartford CA    319-Z19-4341
3 Evan Nolan    IL    219-532-c301
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&#39;ll notice that &lt;code&gt;read_fwf&lt;/code&gt; trimmed the whitespace from the end of each field too (&lt;code&gt;&amp;quot;John Smith&amp;quot;&lt;/code&gt; rather than &lt;code&gt;&amp;quot;John Smith          &amp;quot;&lt;/code&gt;), which is nice.&lt;/p&gt;

&lt;h1 id=&#34;reading-seer-data&#34;&gt;Reading SEER data&lt;/h1&gt;

&lt;p&gt;So, how do you apply this to SEER if we don&#39;t know the column names and positions?&lt;/p&gt;

&lt;p&gt;You can&#39;t.&lt;/p&gt;

&lt;p&gt;But, each SEER &amp;quot;ASCII text file&amp;quot; comes with a &lt;code&gt;.sas&lt;/code&gt; script that can be used to read the file into SAS.
Here&#39;s &lt;a href=&#34;https://seer.cancer.gov/manuals/read.seer.limitedfield.research.nov2018.sas&#34;&gt;an example&lt;/a&gt; that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*filename seer21 &#39;./yr2000_2016.seer21/*.TXT&#39;;    
  
data in;                                                                              
  infile seer21 lrecl=87;                                                             
  input                                                                               
    @ 1   PUBCSNUM             $char8.  /* Patient ID */
    @ 9   REG                  $char10.  /* SEER registry */
    @ 19  RACE1V               $char2.  /* Race/ethnicity */
    @ 21  SEX                  $char1.  /* Sex */
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I don&#39;t know SAS but I can see what this code is doing.
Each line after &lt;code&gt;input&lt;/code&gt; defines one field and it&#39;s:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;start position,&lt;/li&gt;
&lt;li&gt;field name,&lt;/li&gt;
&lt;li&gt;field type (and length/precision [the number after &amp;quot;char&amp;quot;]), and&lt;/li&gt;
&lt;li&gt;a bonus description of the field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this &lt;code&gt;.sas&lt;/code&gt; file we have everything we need to read the entire file.&lt;/p&gt;

&lt;h2 id=&#34;programmatically-extracting-field-information&#34;&gt;Programmatically extracting field information&lt;/h2&gt;

&lt;p&gt;We can use R to extract the 4 components that describe each field in the &lt;code&gt;.sas&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;tidyverse&lt;/code&gt; again here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sas.raw &amp;lt;- read_lines(sas.file)

sas.df &amp;lt;- tibble(raw = sas.raw) %&amp;gt;% 
  ## remove first few rows by insisting an @ that defines the start index of that field
  filter(str_detect(raw, &amp;quot;@&amp;quot;)) %&amp;gt;% 
  ## extract out the start, width and column name+description fields
  mutate(start = str_replace(str_extract(raw, &amp;quot;@ [[:digit:]]{1,3}&amp;quot;), &amp;quot;@ &amp;quot;, &amp;quot;&amp;quot;),
         width = str_replace(str_extract(raw, &amp;quot;\\$char[[:digit:]]{1,2}&amp;quot;), &amp;quot;\\$char&amp;quot;, &amp;quot;&amp;quot;),
         col_name = str_extract(raw, &amp;quot;[[:upper:]]+[[:upper:][:digit:][:punct:]]+&amp;quot;),
         col_desc = str_trim(str_replace(str_replace(str_extract(raw, &amp;quot;\\/\\*.+\\*\\/&amp;quot;), &amp;quot;\\/\\*&amp;quot;, &amp;quot;&amp;quot;), &amp;quot;\\*\\/&amp;quot;, &amp;quot;&amp;quot; )) ) %&amp;gt;% 
  ## coerce to integers
  mutate_at(vars(start, width), funs(as.integer)) %&amp;gt;% 
  ## calculate the end position
  mutate(end = start + width - 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(I&#39;m assuming &lt;code&gt;sas.file&lt;/code&gt; is either a link to a file online, such as &lt;code&gt;&amp;quot;https://seer.cancer.gov/manuals/read.seer.limitedfield.research.nov2018.sas&amp;quot;&lt;/code&gt;, or a local file, such as &lt;code&gt;&amp;quot;path/to/file/example.sas&amp;quot;&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;And with that we have a &lt;code&gt;sas.df&lt;/code&gt; data frame (or tibble) that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A tibble: 35 x 6
   raw                                                                  start width col_name col_desc                    end
   &amp;lt;chr&amp;gt;                                                                &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                     &amp;lt;dbl&amp;gt;
 1 &amp;quot;    @ 1   PUBCSNUM             $char8.  /* Patient ID */&amp;quot;               1     8 PUBCSNUM Patient ID                    8
 2 &amp;quot;    @ 9   REG                  $char10.  /* SEER registry */&amp;quot;           9    10 REG      SEER registry                18
 3 &amp;quot;    @ 19  RACE1V               $char2.  /* Race/ethnicity */&amp;quot;          19     2 RACE1V   Race/ethnicity               20
 4 &amp;quot;    @ 21  SEX                  $char1.  /* Sex */&amp;quot;                     21     1 SEX      Sex                          21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most importantly, &lt;code&gt;sas.df&lt;/code&gt; contains start (and width) values and names for each field that we can directly use to read the whole file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## read the file with the fixed width positions
data.df &amp;lt;- read_fwf(file_path, 
                    fwf_positions(sas.df$start, sas.df$end, sas.df$col_name))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we&#39;re done!&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;I&#39;ve used this template to help several different people start different SEER projects over the years and as long as you can find a &lt;code&gt;.sas&lt;/code&gt; file that matches your data, this will work with almost no effort.
However, different SEER datasets have different formats so take care to check.&lt;/p&gt;

&lt;p&gt;A simple script is up on github &lt;a href=&#34;https://github.com/vincentmajor/SEER_read_fwf&#34;&gt;here&lt;/a&gt;.
&lt;strong&gt;Don&#39;t forget to change the &lt;code&gt;.sas&lt;/code&gt; file/link and the file path&lt;/strong&gt; to your own copy of whichever SEER dataset.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
